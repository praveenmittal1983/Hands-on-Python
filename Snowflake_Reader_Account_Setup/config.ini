[EU]
; Snowflake Account Details. User should have ACCOUNTADMIN rights to run the script
user = 
password = 
account = 
warehouse = 

; External Client Name. It cannot be blank
ext_client_name = 

; Config DB Details. EXT_Mapping table is created in this database.
config_db = CONFIG
config_schema = CONFIG

; Primary DB Details. 
; Multiple Context ID and Names can be provided with a comma separator. For example, context_id = 500, 600
; Tables to ignore while creating VIEWS. For example, primary_ignore_tables = ('Table1', 'Table2')
primary_db = 
primary_schema = 
context_id = 
context_names = 
primary_ignore_tables = ('')

; Flash DB Details. Multiple Event Owner ID and Names can be provided with a comma separator. For example, event_owner_id = 1,2
; Tables to ignore while creating VIEWS. For example, flash_ignore_tables = ('TABLE1', 'TABLE2')
flash_db = 
flash_schema = 
event_owner_id = 
event_owner_names = 
flash_ignore_tables = ('')

; Reader account settings
; Email is used to associate with the Resource Monitor. This is needed for alerting. Note, we have to manually validate the email.
reader_account_admin_email = 
; Display Database Name in the Reader Account. If None, then ext_client_name will be used
reader_account_db_display_name =

[Common_SQL]
; Setting up Mapping Table
sql_get_external_client_id = Select ext_client_id, reader_account_name, reader_account_id from {config_db}.{config_schema}.EXT_MAPPING WHERE ext_client_name = '{ext_client_name}'
sql_distinct_external_client_id = Select count(distinct ext_client_id) from {config_db}.{config_schema}.EXT_MAPPING WHERE ext_client_name = '{ext_client_name}'
sql_create_mapping_table = CREATE or REPLACE Table {config_db}.{config_schema}.EXT_MAPPING (EXT_CLIENT_ID number(38,0) AUTOINCREMENT START 100 INCREMENT 1, EXT_CLIENT_NAME varchar(50), READER_ACCOUNT_NAME varchar(100), READER_ACCOUNT_ID varchar(100), CONTEXT_IDS varchar(50), CONTEXT_NAMES varchar(150), EVENT_OWNER_IDS varchar(50), EVENT_OWNER_NAMES varchar(150));
sql_insert_mapping_table = INSERT INTO {config_db}.{config_schema}.EXT_MAPPING (EXT_Client_Name) values ('{ext_client_name}')
sql_update_raccount_mapping_table = Update {config_db}.{config_schema}.EXT_MAPPING set READER_ACCOUNT_NAME = '{account_name}', READER_ACCOUNT_ID = '{account}' WHERE EXT_CLIENT_ID = '{ext_client_id}' and EXT_CLIENT_NAME = '{ext_client_name}'
sql_update_mapping_table = UPDATE {config_db}.{config_schema}.EXT_MAPPING SET CONTEXT_IDS = '{context_id}', CONTEXT_NAMES = '{context_names}', EVENT_OWNER_IDS = '{event_owner_id}', EVENT_OWNER_NAMES = '{event_owner_names}' WHERE EXT_CLIENT_ID = '{ext_client_id}' and EXT_CLIENT_NAME = '{ext_client_name}'

; Setting up Reader Account
sql_show_managed_account = Show managed accounts like '{account}'
sql_create_managed_account = CREATE MANAGED ACCOUNT EXT_ACC_CLIENT_ID_{ext_client_id} ADMIN_NAME = '{user}', ADMIN_PASSWORD = '{password}', TYPE = READER, COMMENT = 'Reader Account for External Client: {ext_client_name}';
sql_alter_share = ALTER SHARE EXT_SHARE_CLIENT_ID_{ext_client_id} ADD ACCOUNTS={account};

; Setting up DB Role for Reader Account
sql_create_db_role = CREATE or REPLACE DATABASE ROLE {db_name}.EXT_{db_type}_DB_ROLE_CLIENT_ID_{ext_client_id} COMMENT = '{db_type} Database Role for External Client: {ext_client_name}';

; Setting up SHARE for Reader Account
sql_create_share = CREATE OR REPLACE SHARE EXT_SHARE_CLIENT_ID_{ext_client_id} COMMENT = 'Share for External Client: {ext_client_name}';
sql_grant_db_role_to_share = GRANT DATABASE ROLE {db_name}.EXT_{db_type}_DB_ROLE_CLIENT_ID_{ext_client_id} TO SHARE EXT_SHARE_CLIENT_ID_{ext_client_id};




; Setting DB and Schema
sql_grant_db_to_db_role = GRANT USAGE ON DATABASE {db_name} TO DATABASE ROLE {db_name}.EXT_{db_type}_DB_ROLE_CLIENT_ID_{ext_client_id};
sql_grant_schema_to_db_role = GRANT USAGE ON SCHEMA {db_name}.{db_schema} TO DATABASE ROLE {db_name}.EXT_{db_type}_DB_ROLE_CLIENT_ID_{ext_client_id};
sql_grant_db_to_share = GRANT USAGE ON DATABASE {db_name} TO SHARE EXT_SHARE_CLIENT_ID_{ext_client_id};
sql_grant_reference_usage_to_share = GRANT REFERENCE_USAGE ON DATABASE {config_db} TO SHARE EXT_SHARE_CLIENT_ID_{ext_client_id};

; Setting up Views for sharing
sql_get_tables = Select TABLE_NAME from information_schema.tables where TABLE_SCHEMA = '{db_schema}' and TABLE_TYPE = 'BASE TABLE' and TABLE_NAME NOT in {ignore_tables}
sql_get_view = SHOW VIEWS LIKE '{view_name}' IN {db_name}.{db_schema};
sql_create_view = Create or Replace SECURE VIEW {db_name}.{db_schema}.{view_name} as Select * from {db_name}.{db_schema}.{table_name} where {filter_column} IN (SELECT DISTINCT t.value FROM {config_db}.{config_schema}.EXT_MAPPING, TABLE(SPLIT_TO_TABLE(REPLACE({filter_column}s,' ',''),',')) t where reader_account_id = CURRENT_ACCOUNT())
sql_grant_view = grant select on all views in schema {db_name}.{db_schema} to role ENGINEER;
sql_grant_view_to_db_role = GRANT SELECT ON ALL VIEWS in schema {db_name}.{db_schema} TO DATABASE ROLE {db_name}.EXT_{db_type}_DB_ROLE_CLIENT_ID_{ext_client_id};



; Setting up Consumer Account
sql_alter_reader_account_admin = ALTER USER {admin_user} SET EMAIL = '{reader_account_admin_email}';
sql_create_rmonitor = Create or replace resource monitor EXT_RMONITOR_CLIENT_ID_{ext_client_id} with credit_quota=10 triggers on 75 percent do notify on 100 percent do suspend on 110 percent do suspend_immediate;
sql_create_warehouse = Create or replace WAREHOUSE EXT_WAREHOUSE_CLIENT_ID_{ext_client_id} WAREHOUSE_TYPE = STANDARD WAREHOUSE_SIZE = XSMALL AUTO_SUSPEND = 300 AUTO_RESUME = TRUE INITIALLY_SUSPENDED = TRUE RESOURCE_MONITOR = 'EXT_RMONITOR_CLIENT_ID_{ext_client_id}' COMMENT = 'Warehouse for Client Name: {ext_client_name}';  
sql_create_role = Create or replace role EXT_ROLE_CLIENT_ID_{ext_client_id};
sql_create_user = Create user IF NOT EXISTS {ext_username} password = '{ext_password}' MUST_CHANGE_PASSWORD = TRUE DEFAULT_ROLE = EXT_ROLE_CLIENT_ID_{ext_client_id} DEFAULT_WAREHOUSE = EXT_WAREHOUSE_CLIENT_ID_{ext_client_id} COMMENT='External User for Client Name: {ext_client_name}';
sql_grant_role_to_user = GRANT ROLE EXT_ROLE_CLIENT_ID_{ext_client_id} TO USER {ext_username};
sql_grant_role_to_warehouse = GRANT USAGE ON WAREHOUSE EXT_WAREHOUSE_CLIENT_ID_{ext_client_id} TO ROLE EXT_ROLE_CLIENT_ID_{ext_client_id};
sql_create_db = CREATE OR Replace DATABASE {ext_db_name} FROM SHARE AXS.AXS_EUROPE.EXT_SHARE_CLIENT_ID_{ext_client_id};
sql_grant_role_to_db = GRANT IMPORTED PRIVILEGES ON DATABASE {ext_db_name} TO ROLE EXT_ROLE_CLIENT_ID_{ext_client_id};

; Cleanup commands
sql_del_access_table = Delete from {config_db}.{config_schema}.EXT_MAPPING where ext_client_id = '{ext_client_id}' and ext_client_name = '{ext_client_name}';
sql_del_primary_db_role = Drop database role IF EXISTS {primary_db}.EXT_PRIMARY_DB_ROLE_CLIENT_ID_{ext_client_id};
sql_del_flash_db_role = Drop database role IF EXISTS {flash_db}.EXT_FLASH_DB_ROLE_CLIENT_ID_{ext_client_id};
sql_del_share = Drop share AXS.AXS_EUROPE.EXT_SHARE_CLIENT_ID_{ext_client_id};
sql_del_reader_account = Drop managed account EXT_ACC_CLIENT_ID_{ext_client_id};